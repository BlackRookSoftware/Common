Commons (C) Black Rook Software, All rights reserved.

Slated for 2.18.1
=================

- Changed: Reflect.createForType(...) will not convert same types to other 
  types.
- Added: Common.urlUnescape(String) for un-escaping a URL-encoded string.
- Added: Reflect.getClasses(String) for package and classpath scanning.
- Added: Reflect.getClasses(String, ClassLoader) for package and classpath 
  scanning.

Changed in 2.18.0
=================

- Added: com.blackrook.commons.logger package for logging.

Changed in 2.17.0
=================

- Requires: Java 7 or higher.
- Added: Common.parse*Array(...) methods for parsing arrays of primitives from
  strings.
- Added: Common.printBuffer(...) debug methods for printing the contents of 
  buffers, both direct and in-Java.
- Added: com.blackrook.commons.Singleton for managing and creating singleton
  instances of classes.
- Added: com.blackrook.commons.CommonTokenizer for tokenizing an average line of text.
- Added: com.blackrook.commons.Counter: a thread-safe counter object.

Changed in 2.16.0
=================

- Added: Common.getURLsForFiles(File ... files).
- Added: Reflect.createForType(...) methods for type conversions.
- Changed: AbstractVector constructor with capacity did not obey the "if
  capacity <= 0, capacity is 1" policy.
- Changed: Source indentation style.
 

Changed in 2.15.0
=================

- Added: Common.close(...) methods for SQL-related objects.
- Added: com.blackrook.commons.TypeProfile, from Commons Lang.
- Added: Reflect.getFieldValue(Field, Object).

Changed in 2.14.2
=================

- Changed/Fixed: Common.getHTTP*() now supports HTTPS. It didn't before.
- Changed: Some documentation cleanup.

Changed in 2.14.1
=================

- Changed/Fixed: Some documentation cleanup.

Changed in 2.14.0
=================

- Added: Reflect.isArray(Object).
- Added: Reflect.getPublicFields(Object).
- Fixed: Reflect.toAutoboxedType(Class) for promotion of autoboxed types. 
- Fixed: Reflect.isSetter(Method) called isGetterName(), not isSetterName(). 
- Fixed: Reflect.isSetter(Method) and Reflect.isGetter(Method) checks for
  both Void.class and Void.TYPE as return types, like it should have.
- Added: Common.relay(InputStream, OutputStream, int) for variable buffer
  size per call.
- Added: Common.relay(InputStream, OutputStream, int, int) for max length.

Changed in 2.13.3
=================

- Fixed: DataList's delete(int, int) method sometimes didn't work.

Changed in 2.13.2
=================

- Added: Common.indexOf(T, T[]) for searching arrays sequentially.

Changed in 2.13.1
=================

- Added: Common.getTextualContents(File).
- Added: Common.close(ZipFile).
- Added: Support in Common.isEmpty(Object) for arrays.

Changed in 2.13.0
=================

- Changed: Applied copyright clause to some files that didn't have it.
- Changed: CaseInsensitiveComparator's only constructor was made "protected"
  from "private." 
- Added: Common.isWindows8().
- Added: Utility class Reflect, for common reflection operations that users
  may want passive error handling on. 
- Added: PairGroup for generating Pairs.
- Added: SparseGridMap now implements Sizable. 
- Changed: Setting a NULL object in SparseGridMap removes the coordinate pair 
  from the map.
- Added: SparseQueueGridMap also implements sizable, and counts actual amount 
  of objects total in the map. Does not add null objects.

Changed in 2.12.0
=================

- Added: com.blackrook.commons.comparators package for useful Comparator 
  classes.

Changed in 2.11.0
=================

- Added: com.blackrook.commons.map for "Mapped" structures.
- Fixed: AbstractVector.add(int, Object) would occasionally throw an
  ArrayIndexOutOfBoundsException.

Changed in 2.10.4
=================

- Added: Interface Sizable - used by objects that report a size().
- Changed: AbstractChainedHash, AbstractLinkedList, AbstractVector now 
  implement Sizable.
- Added: Common.isEmpty(Object). Can't believe that I thought that I didn't 
  need a method like this!

Changed in 2.10.3
=================

- Fixed: Some Javadoc inconsistencies.

Changed in 2.10.2
=================

- Fixed: DataList.append(byte[], int, int) always appended the length of the
  byte array instead of the length argument.

Changed in 2.10.1
=================

- Added: Common.getFilesByWildcardPath(String) for finding files that
  match a DOS/UNIX wildcard pattern.

Changed in 2.10.0
=================

- Added: AbstractVector.swap(int, int) for swapping the position of two 
  objects in the vector.
- Added: AbstractVector.shift(int, int) for moving the position of an 
  object in the vector, shifting the positions of the rest of objects if
  necessary.
- Added: AbstractVector.shuffle(Random) for shuffling the order of objects
  in the vector.
- Added: Common.digest(byte[], String) for other digests. sha1() and md5()
  now call this method, under the covers.
- Added: Common.matchWildcardPattern(...) methods for matching DOS/UNIX-like
  file patterns.
- Added: Common.setLocal and Common.getLocal for adding thread-specific 
  variables. 
- Added: RMath.roundToNearest(double, double).
- Added: RMath.getAngularDistanceDegrees/Radians(). 
- Added: RMath.getVectorAngleDegrees/Radians(). 
- Added: CustomWaveForm.setAmplitude(int).
- Deprecated: RMath.getVectorAngle(). Use RMath.getVectorAngleDegrees() instead
  for clarity.  
- Fixed: RMath.getInterpolationFactor(double, double, double) would return NaN
  if lo and hi were equal. Now it returns 0.0 in this case.
- Added: Rectangle2D.projectOnto(Tuple2D, Line2D) on Rectangle2D. 
- Added: Rectangle2F projectOnto(Tuple2F, Line2F) on Rectangle2F. 
- Deprecated: com.blackrook.commons.scene in favor of a better spatial hash
  package.
- Added: The com.blackrook.commons.spatialhash package, the replacement for 
  the scene package.

Changed in 2.9.0
================

- Fixed: Some documentation weirdness.
- Fixed: clear()-ing AbstractChainHashes did not reset size. Now it does.
- Added: Convenience methods to Common for opening buffered readers: 
  openTextStream(InputStream), openTextFile(File), openTextFile(String),
  and openSystemIn().
- Added: RMath.gcd(int, int) for finding the greatest common divisor of
  two numbers.
- Added: Common.md5(byte[]) and Common.sha1(byte[]) for checksumming. 
- Added: HashedHashMap<?, ?> and CaseInsensitiveHashedHashMap<?>, similar to
  HashedQueueMap<?, ?> and CaseInsensitiveHashedQueueMap<?>, except it stores
  hashes, not queues.
- Changed: In HashedHashMap, HashedQueueMap, CaseInsensitiveHashedHashMap, and
  CaseInsensitiveHashedQueueMap, if the last value is removed, the key is 
  removed as well.
- Added: Common.asBase64(InputStream, char, char) to Common for converting bytes to
  Base64 strings.
- Added: Common.secureDelete(File, int) and Common.createJunkFile(File).

Changed in 2.8.0
================

- Added: set(...) to Rectangle2F and Rectangle2D. No longer cares about AWT
  Rectangle classes. Not sure why it did in the first place.
- Fixed: If CountMap.give(Object, int) resulted in a total of 0 in the map,
  it would still add the object. Now it doesn't.
- Deprecated: The com.blackrook.commons.vector and everything in it has been
  deprecated, due to potential confusion with java.util.Vector and its
  synchronized methods. Also, "VolatileVector" is a lot to type, compared to
  "List."
- Added: The com.blackrook.commons.list package, the replacement for the
  vector package.  

Changed in 2.7.0
================

- Added: CountMap<T> for counting/tallying objects.

Changed in 2.6.1
================

- Added: Added license text to some files that didn't have it.

Changed in 2.6.0
================

- Added: Variants of the "get content" methods in Common that take an argument
  for custom timeout time.

Changed in 2.5.0
================

- Added: Common.getHTTPContent(URL url), for getting content from an HTTP
  address.
- Added: Common.getHTTPByteContent(URL url), for getting byte content from an 
  HTTP address.
- Added: Common.getFileExtension(...) in several different flavors.

Changed in 2.4.0
================

- Added: ResettableIterable. All Data structures that are Iterable in this
  library now implement this interface.
- Added: Common.noop(), a function that does exactly nothing!
- Fixed: Potential divide by zero in RMath.getVectorAngle().
- Improved: Scene2D uses less gridspace for macro-collision tests.
- Improved: A call of clear() to the abstract data structures does nothing if
  the structure is empty.
- Improved: Common.getExceptionString() now prints causes, if any.

Changed in 2.3.0
================

- Got rid of the SceneObject getUpper/Lower/X/Y/Z() functions. Debated just
  deprecating, but since they only had one typical equivalent value that used
  function calls on the same object to calculate. Adjust your code 
  accordingly. 
- Added Common.close(Closeable).

Changed in 2.2.1
================

- Fixed: A particularly bad bug in Scene2D where Pair memory was re-used 
  instead of re-instantiated, changing grid coordinates for all members of 
  the Scene!
- Changed GridMap.get(int, int) so that it returns null if a set of 
  coordinates off the grid is entered.
- Changed Wave: offset is a double, not float.
- Added Wave.getSample(int).


Changed in 2.2.0
================

- Changed internals of the abstract data structures so that repetitive
  gets, iterations, and other operations do not create new objects.
- Added new interface that extends Iterator, ResettableIterator, which
  contains a reset() method that will set the iterator back to the beginning
  of the structure it was created for, as though it were just created. The
  general policy of reset() is that it will not create additional objects
  to reset itself.
- All iterable structures now return a "ResettableIterator" class.
- Changed Ticker: it is now very, very accurate.
- Scene2D changed a lot. Generates no additional memory for lookups and
  visibility checks.
- Added: randElement(Random, T ... objects) to RMath.
- Fixed: SparseGridMap's get(x,y) method did not correct bounds by wrap type.
- Added: SparseQueueGridMap<T>.
- Added: FloatGrid.
- Added: AbstractVector.replace(int, T).
- Fixed: GridMap contained its own wrapping fields which undermined its 
  parent class's fields. These have been removed. 
- Added: Polynomial.

Changed in 2.1.0
================

- Removed update() from Scene2D.
- Fixed a bunch of places where AbstractLinkedList could break itself.

Changed in 2.0.2
================

- Made all public entry points into Scene2D synchronized.

Changed in 2.0.1
================

- Added "package-info" files to commons packages.
- Added Matrix4F and changed a method or two in Matrix4D.
- Changed internal datatype for Matrix4D in order to be consistent with the 
  other *D structures.  